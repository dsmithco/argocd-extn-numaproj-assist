apiVersion: v1
data:
  install.sh: |
    #!/bin/sh

    set -euox pipefail

    finalizer() {
        code=$?
        if [ $code -ne 0 ]; then
            echo "ERROR: failed to install rollouts extension: error code: $code"
        fi
        end_time=$(uptime_ms)
        elapsed=$(( end_time-start_time ))
        echo "Elapsed Time: $elapsed ms"
        exit 0
    }
    trap finalizer EXIT
    #
    # will return the current system uptime in milliseconds
    uptime_ms() {
        # this is necessary to be able to return a value with milliseconds
        # precision as busybox 'date' command does not support %N format
        read up rest </proc/uptime
        echo $(( 10 * (${up%.*}${up#*.}) ))
    }

    ext_enabled="true"
    ext_version="v0.0.1argocd-server-1.yaml"
    download_max_sec=30
    ext_path="/tmp/script/$ext_version"
    ext_filename="extension.tar"
    ext_file="$ext_path/$ext_filename"
    ext_url="https://github.com/numaproj-labs/argocd-extn-log-summary/releases/download/v0.0.1/extension.tar"
    checksum_url=""

    # will download the extension respecting the max download
    # duration setting
    download_extension() {
        mkdir -p $ext_path
        curl -sL --max-time $download_max_sec $ext_url -o $ext_file
    }

    install_extension() {
        cd $ext_path
        tar -xf $ext_filename
        if [ ! -d "/tmp/extensions/resources" ]; then
            mkdir -p /tmp/extensions/resources
        fi
        cp -Rf resources/* /tmp/extensions/resources/
    }


    ## Script

    start_time=$(uptime_ms)

    if [ "$ext_enabled" != "true" ]; then
        echo "Rollouts extension is disabled"
        exit 0
    fi

    # if extension is alredy downloaded just exit
    if [ -f $ext_file ]; then
        echo "Rollouts extension file already downloaded in $ext_file. Skipping..."
        exit 0
    fi
    download_extension
    install_extension
kind: ConfigMap
metadata:
  name: extension-rollouts-install
